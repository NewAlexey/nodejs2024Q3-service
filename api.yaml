openapi: "3.0.0"
paths:
  /:
    get:
      operationId: "AppController_getHello"
      parameters: []
      responses:
        200:
          description: ""
  /user/{id}:
    get:
      operationId: "UserController_getUser"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: ""
      tags:
        - "user"
    put:
      operationId: "UserController_updateUser"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserDto"
      responses:
        200:
          description: ""
      tags:
        - "user"
    delete:
      operationId: "UserController_deleteUser"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        204:
          description: ""
      tags:
        - "user"
  /user:
    get:
      operationId: "UserController_getAllUsers"
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "user"
    post:
      operationId: "UserController_createUser"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDto"
      responses:
        201:
          description: ""
      tags:
        - "user"
  /track/{id}:
    get:
      operationId: "TrackController_getTrack"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: ""
      tags:
        - "track"
    put:
      operationId: "TrackController_updateTrack"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTrackDto"
      responses:
        200:
          description: ""
      tags:
        - "track"
    delete:
      operationId: "TrackController_deleteTrack"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        204:
          description: ""
      tags:
        - "track"
  /track:
    get:
      operationId: "TrackController_getAllTracks"
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "track"
    post:
      operationId: "TrackController_createTrack"
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTrackDto"
      responses:
        201:
          description: ""
      tags:
        - "track"
  /artist/{id}:
    get:
      operationId: "ArtistController_getArtist"
      summary: ""
      description: "Method to get artist by id."
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtistEntity"
        400:
          description: "Bad request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorDto"
        404:
          description: "Not found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestNotFoundErrorDto"
      tags:
        - "artist"
    put:
      operationId: "ArtistController_updateArtist"
      summary: ""
      description: "Method to update artist data."
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      requestBody:
        required: true
        description: "Object with artist data."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateArtistDto"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtistEntity"
        400:
          description: "Bad request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorErrorListDto"
        404:
          description: "Not found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestNotFoundErrorDto"
      tags:
        - "artist"
    delete:
      operationId: "ArtistController_deleteArtist"
      summary: ""
      description: "Method to delete artist by id."
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        204:
          description: "Ok"
        400:
          description: "Bad request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorDto"
        404:
          description: "Not found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestNotFoundErrorDto"
      tags:
        - "artist"
  /artist:
    get:
      operationId: "ArtistController_getAllArtists"
      summary: ""
      description: "Method to get all artists."
      parameters: []
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ArtistEntity"
      tags:
        - "artist"
    post:
      operationId: "ArtistController_createArtist"
      summary: ""
      description: "Method to create artist."
      parameters: []
      requestBody:
        required: true
        description: "Object with artist data."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateArtistDto"
      responses:
        201:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArtistEntity"
        400:
          description: "Bad request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorErrorListDto"
        500:
          description: "Internal server error."
      tags:
        - "artist"
  /album/{id}:
    get:
      operationId: "AlbumController_getAlbum"
      summary: ""
      description: "Method to get album by id."
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlbumEntity"
        400:
          description: "Bad request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorDto"
        404:
          description: "Not found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestNotFoundErrorDto"
      tags:
        - "album"
    put:
      operationId: "AlbumController_updateAlbum"
      summary: ""
      description: "Method to update album data."
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      requestBody:
        required: true
        description: "Object with artist data."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAlbumDto"
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlbumEntity"
        400:
          description: "Bad request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorErrorListDto"
        404:
          description: "Not found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestNotFoundErrorDto"
      tags:
        - "album"
    delete:
      operationId: "AlbumController_deleteAlbum"
      summary: ""
      description: "Method to delete album by id."
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        204:
          description: "Ok"
        400:
          description: "Bad request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorDto"
        404:
          description: "Not found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestNotFoundErrorDto"
      tags:
        - "album"
  /album:
    get:
      operationId: "AlbumController_getAllAlbums"
      summary: ""
      description: "Method to get all albums."
      parameters: []
      responses:
        200:
          description: "Ok"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/AlbumEntity"
      tags:
        - "album"
    post:
      operationId: "AlbumController_createAlbum"
      summary: ""
      description: "Method to create album."
      parameters: []
      requestBody:
        required: true
        description: "Object with album data."
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAlbumDto"
      responses:
        201:
          description: "Ok"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlbumEntity"
        400:
          description: "Bad request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestErrorErrorListDto"
        500:
          description: "Internal server error."
      tags:
        - "album"
  /favs:
    get:
      operationId: "FavoriteController_getFavorites"
      parameters: []
      responses:
        200:
          description: ""
      tags:
        - "favs"
  /favs/track/{id}:
    post:
      operationId: "FavoriteController_addTrack"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        201:
          description: ""
      tags:
        - "favs"
    delete:
      operationId: "FavoriteController_removeTrack"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        204:
          description: ""
      tags:
        - "favs"
  /favs/artist/{id}:
    post:
      operationId: "FavoriteController_addArtist"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        201:
          description: ""
      tags:
        - "favs"
    delete:
      operationId: "FavoriteController_removeArtist"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        204:
          description: ""
      tags:
        - "favs"
  /favs/album/{id}:
    post:
      operationId: "FavoriteController_addAlbum"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        201:
          description: ""
      tags:
        - "favs"
    delete:
      operationId: "FavoriteController_removeAlbum"
      parameters:
        - name: "id"
          required: true
          in: "path"
          schema:
            type: "string"
      responses:
        204:
          description: ""
      tags:
        - "favs"
info:
  title: "Home Library"
  description: "The Home Library API description"
  version: "1.0"
  contact: {}
tags: []
servers: []
components:
  schemas:
    CreateUserDto:
      type: "object"
      properties:
        login:
          type: "string"
          description: "User name"
          example: "Alexey"
        password:
          type: "string"
          description: "User password"
          example: "qwerty"
      required:
        - "login"
        - "password"
    UpdateUserDto:
      type: "object"
      properties:
        oldPassword:
          type: "string"
          description: "User old password"
          example: "qwerty"
        newPassword:
          type: "string"
          description: "User new password"
          example: "123456"
      required:
        - "oldPassword"
        - "newPassword"
    CreateTrackDto:
      type: "object"
      properties:
        name:
          type: "string"
          description: "Track name (title)"
          example: "B.Y.O.B."
        duration:
          type: "number"
          description: "Track duration"
          example: 4.23
        artistId:
          type: "string"
          description: "Artist id"
          example: "9c5b94b1-35ad-49bb-b118-8e8fc24abf80"
        albumId:
          type: "string"
          description: "Album id"
          example: "85a0c8c7-a17e-4c70-8240-e998d2a718e4"
      required:
        - "name"
        - "duration"
    UpdateTrackDto:
      type: "object"
      properties:
        name:
          type: "string"
          description: "Track name (title)"
          example: "B.Y.O.B."
        duration:
          type: "number"
          description: "Track duration"
          example: 4.23
        artistId:
          type: "string"
          description: "Artist id"
          example: "85a0c8c7-a17e-4c70-8240-e998d2a718e4"
        albumId:
          type: "string"
          description: "Album id"
          example: "85a0c8c7-a17e-4c70-8240-e998d2a718e4"
      required:
        - "name"
        - "duration"
    ArtistEntity:
      type: "object"
      properties:
        id:
          type: "string"
          description: "Artist id"
          example: "9c5b94b1-35ad-49bb-b118-8e8fc24abf80"
        name:
          type: "string"
          description: "Artist name"
          example: "System of a down"
        grammy:
          type: "boolean"
          description: "\"Is artist gets grammy?\" value"
          example: true
      required:
        - "id"
        - "name"
        - "grammy"
    BadRequestErrorDto:
      type: "object"
      properties:
        statusCode:
          type: "number"
          description: "Bad request HTTP error code."
          example: 400
        message:
          type: "string"
          description: "Validation error message"
          example: "Validation failed (uuid  is expected)"
      required:
        - "statusCode"
        - "message"
    RequestNotFoundErrorDto:
      type: "object"
      properties:
        statusCode:
          type: "number"
          description: "HTTP error code"
          example: 404
        message:
          type: "string"
          description: "Error message"
          example: "Entity does not exist"
      required:
        - "statusCode"
        - "message"
    CreateArtistDto:
      type: "object"
      properties:
        name:
          type: "string"
          description: "Artist name"
          example: "System of a down"
        grammy:
          type: "boolean"
          description: "\"Is artist gets grammy?\" value"
          example: true
      required:
        - "name"
        - "grammy"
    BadRequestErrorErrorListDto:
      type: "object"
      properties:
        statusCode:
          type: "number"
          description: "Bad request HTTP error code."
          example: 400
        message:
          description: "Validation error message"
          example: "[\"name must be a string\", \"year must be a number conforming to the specified constraints\"]"
          type: "array"
          items:
            type: "string"
        error:
          type: "string"
          description: "Error status"
          example: "Bad Request"
      required:
        - "statusCode"
        - "message"
        - "error"
    UpdateArtistDto:
      type: "object"
      properties:
        name:
          type: "string"
          description: "Artist name"
          example: "System of a down"
        grammy:
          type: "boolean"
          description: "Is artist gets grammy"
          example: true
      required:
        - "name"
        - "grammy"
    AlbumEntity:
      type: "object"
      properties:
        id:
          type: "string"
          description: "Album id"
          example: "9c5b94b1-35ad-49bb-b118-8e8fc24abf80"
        name:
          type: "string"
          description: "Album name"
          example: "Toxicity"
        year:
          type: "number"
          description: "Album release year"
          example: 2001
        artistId:
          type: "string"
          description: "Artist id"
          example: "85a0c8c7-a17e-4c70-8240-e998d2a718e4"
      required:
        - "id"
        - "name"
        - "year"
        - "artistId"
    CreateAlbumDto:
      type: "object"
      properties:
        name:
          type: "string"
          description: "Album name"
          example: "Toxicity"
        year:
          type: "number"
          description: "Album release year"
          example: 2001
        artistId:
          type: "string"
          description: "Artist id"
          example: "85a0c8c7-a17e-4c70-8240-e998d2a718e4"
      required:
        - "name"
        - "year"
    UpdateAlbumDto:
      type: "object"
      properties:
        name:
          type: "string"
          description: "New Album name"
          example: "Toxicity-V2"
        year:
          type: "number"
          description: "Album release year"
          example: 2001
        artistId:
          type: "string"
          description: "Artist id"
          example: "85a0c8c7-a17e-4c70-8240-e998d2a718e4"
      required:
        - "name"
        - "year"
